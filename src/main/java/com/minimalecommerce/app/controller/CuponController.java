package com.minimalecommerce.app.controller;

import com.minimalecommerce.app.model.Cupon;
import com.minimalecommerce.app.model.Usuario;
import com.minimalecommerce.app.service.CuponService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.*;

@RestController
@RequestMapping("/api/cupones")
@CrossOrigin(origins = {"http://localhost:3000", "http://127.0.0.1:3000", "http://localhost:8080"})
public class CuponController {

    @Autowired
    private CuponService cuponService;

    // ==================== OPERACIONES B√ÅSICAS ====================

    @PostMapping
    public ResponseEntity<Map<String, Object>> crearCupon(@RequestBody Cupon cupon) {
        try {
            System.out.println("üîç Creando nuevo cup√≥n: " + cupon.getCodigo());

            // VALIDAR Y ASIGNAR CREADOR SI NO EXISTE
            if (cupon.getCreador() == null) {
                System.out.println("‚ö†Ô∏è creador es null, buscando usuario por defecto");
                // Crear un usuario temporal o buscar uno existente
                Usuario usuarioDefault = new Usuario();
                usuarioDefault.setId(1L); // ID por defecto
                cupon.setCreador(usuarioDefault);
            }

            System.out.println("üîç creador asignado: " + cupon.getCreador().getId());

            Cupon nuevoCupon = cuponService.crearCupon(cupon);
            Map<String, Object> response = new HashMap<>();
            response.put("success", true);
            response.put("cupon", nuevoCupon);
            response.put("mensaje", "Cup√≥n creado exitosamente");
            System.out.println("‚úÖ Cup√≥n creado exitosamente: " + nuevoCupon.getId());
            return ResponseEntity.ok(response);
        } catch (Exception e) {
            System.err.println("‚ùå Error creando cup√≥n: " + e.getMessage());
            e.printStackTrace();
            Map<String, Object> response = new HashMap<>();
            response.put("success", false);
            response.put("error", "Error al crear cup√≥n: " + e.getMessage());
            return ResponseEntity.badRequest().body(response);
        }
    }

    @GetMapping("/{id}")
    public ResponseEntity<Cupon> obtenerCuponPorId(@PathVariable Long id) {
        try {
            System.out.println("üîç Buscando cup√≥n por ID: " + id);
            Optional<Cupon> cupon = cuponService.obtenerCuponPorId(id);
            if (cupon.isPresent()) {
                System.out.println("‚úÖ Cup√≥n encontrado: " + cupon.get().getCodigo());
                return ResponseEntity.ok(cupon.get());
            } else {
                System.out.println("‚ùå Cup√≥n no encontrado con ID: " + id);
                return ResponseEntity.notFound().build();
            }
        } catch (Exception e) {
            System.err.println("‚ùå Error buscando cup√≥n por ID: " + e.getMessage());
            e.printStackTrace();
            return ResponseEntity.badRequest().build();
        }
    }

    @PutMapping("/{id}")
    public ResponseEntity<Map<String, Object>> actualizarCupon(@PathVariable Long id, @RequestBody Cupon cupon) {
        try {
            System.out.println("üîç Actualizando cup√≥n ID: " + id);
            Cupon cuponActualizado = cuponService.actualizarCupon(id, cupon);
            Map<String, Object> response = new HashMap<>();
            response.put("success", true);
            response.put("cupon", cuponActualizado);
            response.put("mensaje", "Cup√≥n actualizado exitosamente");
            System.out.println("‚úÖ Cup√≥n actualizado exitosamente: " + cuponActualizado.getCodigo());
            return ResponseEntity.ok(response);
        } catch (Exception e) {
            System.err.println("‚ùå Error actualizando cup√≥n: " + e.getMessage());
            e.printStackTrace();
            Map<String, Object> response = new HashMap<>();
            response.put("success", false);
            response.put("error", e.getMessage());
            return ResponseEntity.badRequest().body(response);
        }
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Map<String, String>> eliminarCupon(@PathVariable Long id) {
        try {
            System.out.println("üîç Eliminando cup√≥n ID: " + id);
            cuponService.eliminarCupon(id);
            Map<String, String> response = new HashMap<>();
            response.put("success", "true");
            response.put("mensaje", "Cup√≥n eliminado correctamente");
            System.out.println("‚úÖ Cup√≥n eliminado exitosamente: " + id);
            return ResponseEntity.ok(response);
        } catch (Exception e) {
            System.err.println("‚ùå Error eliminando cup√≥n: " + e.getMessage());
            e.printStackTrace();
            Map<String, String> response = new HashMap<>();
            response.put("success", "false");
            response.put("error", e.getMessage());
            return ResponseEntity.badRequest().body(response);
        }
    }

    // ==================== B√öSQUEDAS ESPEC√çFICAS ====================

    @GetMapping("/codigo/{codigo}")
    public ResponseEntity<Cupon> buscarPorCodigo(@PathVariable String codigo) {
        try {
            System.out.println("üîç Buscando cup√≥n por c√≥digo: " + codigo);
            Cupon cupon = cuponService.buscarPorCodigo(codigo);
            System.out.println("‚úÖ Cup√≥n encontrado por c√≥digo: " + cupon.getId());
            return ResponseEntity.ok(cupon);
        } catch (Exception e) {
            System.err.println("‚ùå Error buscando cup√≥n por c√≥digo: " + e.getMessage());
            return ResponseEntity.notFound().build();
        }
    }

    @GetMapping("/validos")
    public ResponseEntity<List<Cupon>> obtenerCuponesValidos() {
        try {
            System.out.println("üîç Solicitando cupones v√°lidos...");
            List<Cupon> cupones = cuponService.obtenerCuponesValidos();
            System.out.println("‚úÖ Cupones v√°lidos obtenidos: " + cupones.size());
            return ResponseEntity.ok(cupones);
        } catch (Exception e) {
            System.err.println("‚ùå Error en endpoint /validos: " + e.getMessage());
            e.printStackTrace();
            return ResponseEntity.status(500).body(new ArrayList<>());
        }
    }

    // ==================== OPERACIONES POR VENDEDOR ====================

    @GetMapping("/vendedor/{vendedorId}")
    public ResponseEntity<List<Cupon>> obtenerCuponesPorVendedor(@PathVariable Long vendedorId) {
        try {
            System.out.println("üîç Solicitando cupones del vendedor: " + vendedorId);
            List<Cupon> cupones = cuponService.obtenerCuponesPorVendedor(vendedorId);
            System.out.println("‚úÖ Cupones del vendedor obtenidos: " + cupones.size());
            return ResponseEntity.ok(cupones);
        } catch (Exception e) {
            System.err.println("‚ùå Error en endpoint /vendedor/" + vendedorId + ": " + e.getMessage());
            e.printStackTrace();
            return ResponseEntity.status(500).body(new ArrayList<>());
        }
    }

    @GetMapping("/vendedor/{vendedorId}/activos")
    public ResponseEntity<List<Cupon>> obtenerCuponesActivosPorVendedor(@PathVariable Long vendedorId) {
        try {
            System.out.println("üîç Solicitando cupones activos del vendedor: " + vendedorId);
            List<Cupon> cupones = cuponService.obtenerCuponesActivosPorVendedor(vendedorId);
            System.out.println("‚úÖ Cupones activos del vendedor obtenidos: " + cupones.size());
            return ResponseEntity.ok(cupones);
        } catch (Exception e) {
            System.err.println("‚ùå Error obteniendo cupones activos: " + e.getMessage());
            e.printStackTrace();
            return ResponseEntity.badRequest().build();
        }
    }

    @GetMapping("/vendedor/{vendedorId}/contador")
    public ResponseEntity<Map<String, Object>> obtenerContadorPorVendedor(@PathVariable Long vendedorId) {
        try {
            System.out.println("üîç Obteniendo contador de cupones para vendedor: " + vendedorId);
            Map<String, Object> contador = new HashMap<>();
            contador.put("total", cuponService.contarCuponesPorVendedor(vendedorId));
            contador.put("activos", cuponService.contarCuponesActivosPorVendedor(vendedorId));
            contador.put("totalUsos", cuponService.obtenerTotalUsosPorVendedor(vendedorId));
            System.out.println("‚úÖ Contador obtenido para vendedor: " + vendedorId);
            return ResponseEntity.ok(contador);
        } catch (Exception e) {
            System.err.println("‚ùå Error obteniendo contador: " + e.getMessage());
            e.printStackTrace();
            return ResponseEntity.badRequest().build();
        }
    }

    @GetMapping("/vendedor/{vendedorId}/proximos-vencer")
    public ResponseEntity<List<Cupon>> obtenerCuponesProximosAVencerPorVendedor(
            @PathVariable Long vendedorId,
            @RequestParam(defaultValue = "7") int dias) {
        try {
            System.out.println("üîç Obteniendo cupones pr√≥ximos a vencer para vendedor: " + vendedorId);
            List<Cupon> cupones = cuponService.obtenerCuponesProximosAVencerPorVendedor(vendedorId, dias);
            System.out.println("‚úÖ Cupones pr√≥ximos a vencer obtenidos: " + cupones.size());
            return ResponseEntity.ok(cupones);
        } catch (Exception e) {
            System.err.println("‚ùå Error obteniendo cupones pr√≥ximos a vencer: " + e.getMessage());
            e.printStackTrace();
            return ResponseEntity.badRequest().build();
        }
    }

    // ==================== GESTI√ìN DE ESTADO ====================

    @PutMapping("/{id}/desactivar")
    public ResponseEntity<Map<String, String>> desactivarCupon(@PathVariable Long id) {
        try {
            System.out.println("üîç Desactivando cup√≥n ID: " + id);
            cuponService.desactivarCupon(id);
            Map<String, String> response = new HashMap<>();
            response.put("success", "true");
            response.put("mensaje", "Cup√≥n desactivado correctamente");
            System.out.println("‚úÖ Cup√≥n desactivado exitosamente: " + id);
            return ResponseEntity.ok(response);
        } catch (Exception e) {
            System.err.println("‚ùå Error desactivando cup√≥n: " + e.getMessage());
            e.printStackTrace();
            Map<String, String> response = new HashMap<>();
            response.put("success", "false");
            response.put("error", e.getMessage());
            return ResponseEntity.badRequest().body(response);
        }
    }

    // ==================== APLICACI√ìN DE CUPONES ====================

    @PostMapping("/aplicar")
    public ResponseEntity<Map<String, Object>> aplicarCupon(@RequestBody Map<String, Object> request) {
        try {
            String codigo = request.get("codigo").toString();
            BigDecimal montoOriginal = new BigDecimal(request.get("montoOriginal").toString());
            System.out.println("üîç Aplicando cup√≥n: " + codigo + " a monto: " + montoOriginal);

            Cupon cupon = cuponService.validarYObtenerCupon(codigo);
            BigDecimal descuento = cuponService.calcularDescuento(cupon, montoOriginal);
            BigDecimal montoFinal = montoOriginal.subtract(descuento);

            Map<String, Object> response = new HashMap<>();
            response.put("cupon", cupon);
            response.put("montoOriginal", montoOriginal);
            response.put("descuento", descuento);
            response.put("montoFinal", montoFinal);
            response.put("success", true);
            response.put("mensaje", "Cup√≥n aplicado correctamente");

            System.out.println("‚úÖ Cup√≥n aplicado exitosamente. Descuento: " + descuento);
            return ResponseEntity.ok(response);
        } catch (Exception e) {
            System.err.println("‚ùå Error aplicando cup√≥n: " + e.getMessage());
            e.printStackTrace();
            Map<String, Object> response = new HashMap<>();
            response.put("success", false);
            response.put("error", e.getMessage());
            return ResponseEntity.badRequest().body(response);
        }
    }

    @PostMapping("/validar")
    public ResponseEntity<Map<String, Object>> validarCupon(@RequestBody Map<String, Object> request) {
        try {
            String codigo = request.get("codigo").toString();
            System.out.println("üîç Validando cup√≥n: " + codigo);

            Cupon cupon = cuponService.validarYObtenerCupon(codigo);

            Map<String, Object> response = new HashMap<>();
            response.put("valido", true);
            response.put("cupon", cupon);
            response.put("mensaje", "Cup√≥n v√°lido");

            System.out.println("‚úÖ Cup√≥n v√°lido: " + codigo);
            return ResponseEntity.ok(response);
        } catch (Exception e) {
            System.err.println("‚ùå Error validando cup√≥n: " + e.getMessage());
            Map<String, Object> response = new HashMap<>();
            response.put("valido", false);
            response.put("mensaje", e.getMessage());
            return ResponseEntity.badRequest().body(response);
        }
    }

    // ==================== ESTAD√çSTICAS Y REPORTES ====================

    @GetMapping("/estadisticas/vendedor/{vendedorId}")
    public ResponseEntity<Map<String, Object>> obtenerEstadisticasVendedor(@PathVariable Long vendedorId) {
        try {
            System.out.println("üîç Obteniendo estad√≠sticas para vendedor: " + vendedorId);
            Map<String, Object> estadisticas = cuponService.obtenerEstadisticasCompletas(vendedorId);
            System.out.println("‚úÖ Estad√≠sticas obtenidas para vendedor: " + vendedorId);
            return ResponseEntity.ok(estadisticas);
        } catch (Exception e) {
            System.err.println("‚ùå Error obteniendo estad√≠sticas: " + e.getMessage());
            e.printStackTrace();
            return ResponseEntity.badRequest().build();
        }
    }

    @GetMapping("/mantenimiento/desactivar-vencidos")
    public ResponseEntity<Map<String, Object>> desactivarCuponesVencidos() {
        try {
            System.out.println("üîç Ejecutando mantenimiento: desactivar cupones vencidos");
            int cuponesDesactivados = cuponService.desactivarCuponesVencidos();

            Map<String, Object> response = new HashMap<>();
            response.put("cuponesDesactivados", cuponesDesactivados);
            response.put("mensaje", "Mantenimiento completado");

            System.out.println("‚úÖ Mantenimiento completado. Cupones desactivados: " + cuponesDesactivados);
            return ResponseEntity.ok(response);
        } catch (Exception e) {
            System.err.println("‚ùå Error en mantenimiento: " + e.getMessage());
            e.printStackTrace();
            Map<String, Object> response = new HashMap<>();
            response.put("error", e.getMessage());
            return ResponseEntity.badRequest().body(response);
        }
    }

    // ==================== HEALTH CHECK ====================

    @GetMapping("/health")
    public ResponseEntity<Map<String, String>> healthCheck() {
        Map<String, String> response = new HashMap<>();
        response.put("status", "ok");
        response.put("timestamp", LocalDateTime.now().toString());
        response.put("service", "cupones-api");
        response.put("version", "1.0.0");
        System.out.println("‚úÖ Health check realizado");
        return ResponseEntity.ok(response);
    }
}
